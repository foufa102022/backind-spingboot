
pipeline {
    agent any

    environment {
        // Définir JAVA_HOME avec l'emplacement de l'installation Java
        JAVA_HOME = "C:\\Program Files\\Java\\jdk-17"
        // Ajouter Java au PATH
        PATH = "${JAVA_HOME}\\bin:${PATH};${DOCKER_PATH}"
        // Définir le chemin de Docker
         DOCKER_PATH = "C:\\Program Files\\Docker\\cli-plugins"
        // Utilisez les informations d'identification Docker Hub en tant que variable d'environnement
        DOCKERHUB_CREDENTIALS = credentials('DockerHub')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Récupérez les sources du référentiel Git
                    checkout scm
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    // Changez de répertoire vers le dossier de votre application
                    dir('Backend/crowdapp') {
                        // Exécutez la commande Maven pour nettoyer et construire le projet
                        bat './mvnw clean install'
                    }
                }
            }
        }

        stage('Docker Build and Push') {
            steps {
                script {
                    // Revenez au répertoire parent
                    // bat 'cd ..'
                    bat 'dir'
                    dir('Backend'){
                         // Connectez-vous à Docker Hub en utilisant les informations d'identification stockées dans la variable d'environnement
                    bat "docker login -u ${DOCKERHUB_CREDENTIALS_USR} -p ${DOCKERHUB_CREDENTIALS_PSW}"
                    // Supprimez le conteneur Docker existant
                    //bat 'docker rm -f back_container'
                    // Construisez l'image Docker
                    bat 'docker --version'
                    bat 'docker build -t spring-img .'
                    // Étiquetez l'image Docker avec le numéro de version de la construction (%BUILD_ID%)
                    bat "docker tag spring-img:latest chetouiiftikhar/spring-img:%BUILD_ID%"
                    // Poussez l'image Docker vers Docker Hub
                    bat "docker push chetouiiftikhar/spring-img:%BUILD_ID%"
                }}
            }
        }
    }
}


// pipeline {
//    agent any
//     stages {
          
//        stage('Build and Package') {
//             steps {
//                 script {
//                     // node {
//                     //     def mvnHome = tool 'maven-3.9.5'
//                     //     def dockerImage = 'spring-img'
//                     //     def dockerImageTag = "chetouiiftikhar/spring-img:${BUILD_ID}"

//                         sh 'Backend/crowdapp && ./mvnw -DskipTests clean install --fail-at-end'
//                     }
//                 //}
//             }
//         }
//         stage('Build Docker Image') {
//             steps {
//                 script {
//                     sh 'cd .. && docker rm -f back_container && docker build -t spring-img_%BUILD_ID% .'
//                 }
//             }
//         }
//         // stage('Tag and Push Docker Image') {
//         //     steps {
//         //         script {
//         //             sh "docker tag ${dockerImage}:latest ${dockerImageTag}"
//         //             sh "docker login -u *** -p *****"
//         //             sh "docker push ${dockerImageTag"
//         //         }
//         //     }
//         // }
//         stage('Run Docker Container') {
//             steps {
//                 script {
//                     sh 'docker run -p 8888:8080 -dit --name back_container spring-img_%BUILD_ID%'
//                 }
//             }
//         }
//    }
// }

